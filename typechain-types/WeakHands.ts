/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface WeakHandsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canWithdraw"
      | "deposit"
      | "getLatestPrice"
      | "getLockInfo"
      | "locks"
      | "setParameters"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Deposit" | "ParametersSet" | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "locks", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setParameters",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "canWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    newTotal: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, newTotal: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    newTotal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParametersSetEvent {
  export type InputTuple = [
    user: AddressLike,
    targetDate: BigNumberish,
    targetPrice: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    targetDate: bigint,
    targetPrice: bigint
  ];
  export interface OutputObject {
    user: string;
    targetDate: bigint;
    targetPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WeakHands extends BaseContract {
  connect(runner?: ContractRunner | null): WeakHands;
  waitForDeployment(): Promise<this>;

  interface: WeakHandsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canWithdraw: TypedContractMethod<[], [boolean], "view">;

  deposit: TypedContractMethod<[], [void], "payable">;

  getLatestPrice: TypedContractMethod<[], [bigint], "view">;

  getLockInfo: TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint, bigint, bigint, boolean, boolean] & {
        amount: bigint;
        targetDate: bigint;
        targetPrice: bigint;
        parametersSet: boolean;
        withdrawn: boolean;
      }
    ],
    "view"
  >;

  locks: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean, boolean] & {
        amount: bigint;
        targetDate: bigint;
        targetPrice: bigint;
        parametersSet: boolean;
        withdrawn: boolean;
      }
    ],
    "view"
  >;

  setParameters: TypedContractMethod<
    [_targetDate: BigNumberish, _targetPriceUSD: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canWithdraw"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getLatestPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLockInfo"
  ): TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint, bigint, bigint, boolean, boolean] & {
        amount: bigint;
        targetDate: bigint;
        targetPrice: bigint;
        parametersSet: boolean;
        withdrawn: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "locks"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean, boolean] & {
        amount: bigint;
        targetDate: bigint;
        targetPrice: bigint;
        parametersSet: boolean;
        withdrawn: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setParameters"
  ): TypedContractMethod<
    [_targetDate: BigNumberish, _targetPriceUSD: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "ParametersSet"
  ): TypedContractEvent<
    ParametersSetEvent.InputTuple,
    ParametersSetEvent.OutputTuple,
    ParametersSetEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "ParametersSet(address,uint256,uint256)": TypedContractEvent<
      ParametersSetEvent.InputTuple,
      ParametersSetEvent.OutputTuple,
      ParametersSetEvent.OutputObject
    >;
    ParametersSet: TypedContractEvent<
      ParametersSetEvent.InputTuple,
      ParametersSetEvent.OutputTuple,
      ParametersSetEvent.OutputObject
    >;

    "Withdrawal(address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
